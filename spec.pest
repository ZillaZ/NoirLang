WHITESPACE = _{ " " | NEWLINE }

program      = _{ SOI ~ expr+ ~ EOI }
string       = _{ ASCII_ALPHANUMERIC+ }
integer      = @{ ASCII_DIGIT+ }
float        = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
binary_op    = _{ add | sub | mul | div }
add          =  { "+" }
sub          =  { "-" }
mul          =  { "*" }
div          =  { "/" }
dd           = _{ ":" }
eq           = _{ "=" }
math         =  { atom ~ (binary_op ~ atom)* }
expr         =  { (return | function | call | block | declaration) }
declaration  =  { let ~ name ~ dd ~ value_decl }
value_decl   =  { float_decl | int_decl | string_decl }
value        =  { math | call | string_value | integer | float | name }
call         =  { name ~ "(" ~ (param)* ~ ")" }
param        =  { name | value }
name         =  { !integer ~ string }
function     =  { fn ~ name ~ args ~ return_type? ~ block }
return_type  =  { arrow ~ datatype }
arrow        = _{ "->" }
args         =  { "(" ~ arg* ~ ")" }
v            =  { "," }
arg          =  { name ~ dd ~ datatype ~ (v ~ name ~ dd ~ datatype)* }
datatype     =  { float_type | int_type | string_type }
int_type     =  { unsigned? ~ "i" ~ integer }
float_type   =  { unsigned? ~ "f" ~ integer }
string_type  =  { "string" }
string_decl  =  { string_type ~ eq ~ (string_value | call | block | name) }
int_decl     =  { int_type ~ eq ~ (math | integer | call | block | name) }
float_decl   =  { float_type ~ eq ~ (math | float | call | block | name) }
string_value =  { "\"" ~ string ~ "\"" }
unsigned     =  { "u" }
fn           = _{ "fn" }
let          = _{ "let" }
block        =  { "{" ~ expr* ~ return? ~ "}" }
return       =  { "return" ~ value }
primary      =  { float | integer | call | name | block | "(" ~ math ~ ")" }
unary_minus  =  { "-" }
atom         =  { unary_minus? ~ primary }
